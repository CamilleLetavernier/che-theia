#!groovy

pipeline {
    agent { label 'minikube-rhel7-16gb' }

    options {
        timestamps()
        timeout(time: 40, unit: 'MINUTES')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '', daysToKeepStr: '60', numToKeepStr: '100'))
    }

    environment {
        PATH = "/tmp:/qa/tools/opt/apache-maven-3.5.4/bin:$PATH"
        JENKINS_BUILD = "true"

        DEVFILE_URL = "${WORKSPACE}/che/e2e/files/happy-path/happy-path-workspace.yaml"
        SUCCESS_THRESHOLD = 5

        CHE_IMAGE_REPO = "maxura/che-server"
        CHE_IMAGE_TAG = "nightly"

        META_YAML_URL='https://raw.githubusercontent.com/eclipse/che-plugin-registry/master/v3/plugins/eclipse/che-theia/latest/meta.yaml'
        YQ_TOOL_URL='https://github.com/mikefarah/yq/releases/download/2.4.0/yq_linux_amd64'
    }

    stages {
        stage("Build che-theia image and prepare to start Che on K8S") {
            failFast true

            parallel {
                stage("Build che-theia image") {
                    steps {
                        withCredentials([string(credentialsId: 'cc890652-da70-4472-acf0-9dfe857f3a20', variable: 'github_token')]) {
                            script {
                                sh """
                                  export GITHUB_TOKEN=${github_token}
                                  ${WORKSPACE}/build.sh --pr --skip-tests
                                """
                            }
                        }
                    }
                }

                stage("Download chectl") {
                    steps {
                        script {
                            // TO-DO use option "--install-path" https://github.com/eclipse/che/pull/14182
                            sh """
                               curl -sL  https://www.eclipse.org/che/chectl/ > install_chectl.sh
                               chmod +x install_chectl.sh
                               sudo PATH=$PATH ./install_chectl.sh --channel=next
                               sudo mv /usr/local/bin/chectl ${WORKSPACE}/chectl
                               sudo chmod +x ${WORKSPACE}/chectl
                            """
                        }
                    }
                }

                stage("Obtain E2E Happy path tests") {
                    steps {
                        checkout([$class                           : 'GitSCM',
                                  branches                         : [[name: "${sha1}"]],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions                       : [[$class           : 'RelativeTargetDirectory',
                                                                       relativeTargetDir: 'che']],
                                  userRemoteConfigs                : [[url: "https://github.com/eclipse/che.git"]]])
                    }
                }

                stage("Prepare meta.yaml and launch httpd-server") {
                    steps {
                        script {
                            sh """
                              wget $YQ_TOOL_URL
                              
                              sudo chmod +x yq_linux_amd64
                              
                              wget $META_YAML_URL
                              ./yq_linux_amd64 w -i meta.yaml spec.containers[0].image maxura/che-theia:${ghprbPullId}
                             
                              mkdir -p ${WORKSPACE}/httpd
                              
                              cp ${WORKSPACE}/meta.yaml ${WORKSPACE}/httpd
                              
                              docker run -d --rm -t \\
                                 -v ${WORKSPACE}/httpd:/var/www/localhost/htdocs \\
                                 -p 8080:80 \\
                                 sebp/lighttpd
                            """
                        }
                    }
                }

                stage("Start Kubernetes") {
                    steps {
                        script {
                            sh """
                              export MINIKUBE_WANTUPDATENOTIFICATION=false
                              export MINIKUBE_WANTREPORTERRORPROMPT=false
                              export MINIKUBE_HOME=$HOME
                              export CHANGE_MINIKUBE_NONE_USER=true
                              export KUBECONFIG=$HOME/.kube/config
                              export DOCKER_CONFIG=$HOME/.docker

                              mkdir -p $HOME/.kube $HOME/.minikube
                              touch \$KUBECONFIG
                              
                              sudo -E /usr/local/bin/minikube start \\
                                  --vm-driver=none \\
                                  --cpus 4 \\
                                  --memory 12288 \\
                                  --logtostderr
                            """
                        }
                    }
                }
            }
        }

        stage("Push che-theia image to docker.io") {
            steps {
                withCredentials([string(credentialsId: 'ed71c034-60bc-4fb1-bfdf-9570209076b5', variable: 'maxura_docker_password')]) {
                    script {
                        sh """
                          docker tag eclipse/che-theia:next maxura/che-theia:${ghprbPullId}
                          docker login -u maxura -p ${maxura_docker_password}
                          docker push maxura/che-theia:${ghprbPullId}
                        """
                    }
                }
            }
        }

        stage("Start Single Che") {
            steps {
                script {
                    sh """
                      ${WORKSPACE}/chectl server:start \\
                        --k8spodreadytimeout=180000 \\
                        -t=${WORKSPACE}/deploy/ \\
                        --platform=minikube \\
                        --listr-renderer=verbose
                    """

                    // wait che-server to be available
                    sh """
                        CHE_URL=\$(kubectl get ingress che-ingress -n=che -o=jsonpath={'.spec.rules[0].host'})
                        
                        COUNTER=0;
                        SUCCESS_RATE_COUNTER=0;
                        while true; do
                        if [ \$COUNTER -gt 180 ]; then
                        echo "Unable to get stable route. Exiting"
                        exit 1
                        fi
                        
                        ((COUNTER+=1))
                        
                        
                        STATUS_CODE=\$(curl -sL -w "%{http_code}" -I \${CHE_URL} -o /dev/null; true) || true
                        
                        echo "Try \${COUNTER}. Status code: \${STATUS_CODE}"
                        if [ "\$STATUS_CODE" == "200" ]; then 
                        ((SUCCESS_RATE_COUNTER+=1))
                        fi
                        sleep 1;
                        
                        if [ \$SUCCESS_RATE_COUNTER == \$SUCCESS_THRESHOLD ]; then 
                        echo "Route is stable enough. Continuing running tests"
                        break
                        fi
                        done
                    """
                }
            }
        }

        stage("Patch Che to use che-theia which was built from pull request") {
            steps {
                script {
                    sh """
                      PUBLIC_IP=\$(docker run --rm --net host eclipse/che-ip:6.19.0)
                      PATCH_DATA="{\\"data\\":{\\"CHE_WORKSPACE_DEVFILE_DEFAULT__EDITOR\\":\\"http://\${PUBLIC_IP}:8080/meta.yaml\\"}}"
                      kubectl --namespace=che patch cm che --patch \${PATCH_DATA}
                      kubectl scale deployments/che --namespace=che --replicas=0
                      kubectl scale deployments/che --namespace=che --replicas=1
                    """

                    // wait che-server to be available
                    sh """
                         CHE_URL=\$(kubectl get ingress che-ingress -n=che -o=jsonpath={'.spec.rules[0].host'})
                         
                         COUNTER=0;
                         SUCCESS_RATE_COUNTER=0;
                         while true; do
                          if [ \$COUNTER -gt 180 ]; then
                          echo "Unable to get stable route. Exiting"
                            exit 1
                          fi
                          
                          ((COUNTER+=1))
                          
                          
                          STATUS_CODE=\$(curl -sL -w "%{http_code}" -I \${CHE_URL} -o /dev/null; true) || true
                          
                          echo "Try \${COUNTER}. Status code: \${STATUS_CODE}"
                          if [ "\$STATUS_CODE" == "200" ]; then 
                            ((SUCCESS_RATE_COUNTER+=1))
                          fi
                          sleep 1;
                        
                          if [ \$SUCCESS_RATE_COUNTER == \$SUCCESS_THRESHOLD ]; then 
                            echo "Route is stable enough. Continuing running tests"
                            break
                          fi
                         done
                    """
                }
            }
        }

        stage("Create test workspace") {
            steps {
                script {
                    sh "${WORKSPACE}/chectl workspace:start --devfile=$DEVFILE_URL"
                }
            }
        }

        stage("Run E2E Happy path tests") {
            steps {
                script {
                    // TO-DO (#14171) switch to eclipse/che-e2e image
//                    sh """
//                         CHE_HOST=\$(kubectl get ingress che-ingress -n=che -o=jsonpath={'.spec.rules[0].host'})
//                         CHE_URL=http://\${CHE_HOST}
//                         docker run --shm-size=256m --net=host --ipc=host \\
//                           -e TS_SELENIUM_HEADLESS='true' \\
//                           -e TS_SELENIUM_DEFAULT_TIMEOUT=300000 \\
//                           -e TS_SELENIUM_LOAD_PAGE_TIMEOUT=240000 \\
//                           -e TS_SELENIUM_WORKSPACE_STATUS_POLLING=20000 \\
//                           -e TS_SELENIUM_BASE_URL=\${CHE_URL} \\
//                           -v ${WORKSPACE}/che/e2e:/root/local_tests:Z \\
//                           eclipse/che-e2e:nightly
//                     """

                    sh """
                        CHE_HOST=\$(kubectl get ingress che-ingress -n=che -o=jsonpath={'.spec.rules[0].host'})
                        CHE_URL=http://\${CHE_HOST}
                        docker run --net=host --ipc=host \\
                           -e TS_SELENIUM_HEADLESS='true' \\
                           -e TS_SELENIUM_DEFAULT_TIMEOUT=300000 \\
                           -e TS_SELENIUM_LOAD_PAGE_TIMEOUT=240000 \\
                           -e TS_SELENIUM_BASE_URL=\${CHE_URL} \\
                           -e TS_SELENIUM_WORKSPACE_STATUS_POLLING=20000 \\
                           -w /home/e2e \\
                           -v $WORKSPACE/che:/home:Z \\
                           cypress/browsers:node8.9.3-chrome73 bash -c "npm install &&  npm run test-happy-path"
                    """
                }
            }
        }
    }

    post {
        failure {
            script {
                echo "Create screencast from $WORKSPACE/che/e2e/report/executionScreencast files."
                sh """
                    command -v ffmpeg >/dev/null 2>&1 && if ls $WORKSPACE/che/e2e/report/executionScreencast/*.png 1> /dev/null 2>&1; then
                      cd $WORKSPACE/che/e2e/report/executionScreencast

                      # remove first screenshot which has lower resolution 800x600 and breaks screencast video
                      sudo rm -f 00100001* || true
                      
                      sudo ffmpeg -framerate 1 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p $WORKSPACE/che/e2e/report/screencast.mp4
                      cd $WORKSPACE/che/e2e/report/
                      sudo rm -rf $WORKSPACE/che/e2e/report/executionScreencast
                    fi
                """
            }
        }

        cleanup {
            archiveArtifacts allowEmptyArchive: true, artifacts: "che/e2e/report/**"

            script {
                sh """
                   kubectl get configmaps --namespace=che che -o yaml || true                      
                """
            }

            cleanWs notFailBuild: true, disableDeferredWipeout: true, deleteDirs: true
        }

    }

}
