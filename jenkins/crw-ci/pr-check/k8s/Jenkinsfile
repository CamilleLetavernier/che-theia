#!groovy

pipeline {
    agent { label 'minikube-rhel7-32gb' }

    options {
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '', daysToKeepStr: '60', numToKeepStr: '100'))
        ansiColor('xterm')
    }

    environment {
        PATH="/tmp:/qa/tools/opt/apache-maven-3.5.4/bin:$PATH"
        JENKINS_BUILD="true"

        DEVFILE_URL="${WORKSPACE}/che/e2e/files/happy-path/happy-path-workspace.yaml"
        SUCCESS_THRESHOLD=5

        CHE_IMAGE_REPO="maxura/che-server"
        CHE_IMAGE_TAG="nightly"

        CHE_PLUGIN_REGISTRY_URL="https://raw.githubusercontent.com/eclipse/che-plugin-registry/master/v3/plugins"
        CHE_THEIA_META_YAML_URL="${CHE_PLUGIN_REGISTRY_URL}/eclipse/che-theia/next/meta.yaml"
        VSCODE_YAML_META_YAML_URL="${CHE_PLUGIN_REGISTRY_URL}/redhat/vscode-yaml/latest/meta.yaml"
        JAVA8_META_YAML_URL="${CHE_PLUGIN_REGISTRY_URL}/redhat/java8/latest/meta.yaml"
        VSCODE_KUBERNETES_TOOLS_META_YAML_URL="${CHE_PLUGIN_REGISTRY_URL}/ms-kubernetes-tools/vscode-kubernetes-tools/latest/meta.yaml"

        YQ_TOOL_URL='https://github.com/mikefarah/yq/releases/download/2.4.0/yq_linux_amd64'

        PR_CHECK_FILES_DIR="${WORKSPACE}/pr-check-files/che-theia/${ghprbPullId}"
        PR_CHECK_FILES_GITHUB_URL="https://raw.githubusercontent.com/chepullreq4/pr-check-files/master/che-theia/${ghprbPullId}"

        LOGS_AND_CONFIGS="${WORKSPACE}/logs-and-configs"
    }

    stages {
        stage("Build che-theia image and prepare to start Che on K8S") {
            failFast true

            parallel {
                stage("Build che-theia image") {
                    steps {
                        withCredentials([string(credentialsId: 'e45af3e6-8061-4d02-b187-b1c3bb133d3a', variable: 'github_token')]) {
                            nodejs('nodejs-10.9.0') {
                                script {
                                    sh """
                                      export GITHUB_TOKEN=${github_token}
                                      ${WORKSPACE}/build.sh --skip-tests
                                    """
                                }
                            }
                        }

                        withCredentials([string(credentialsId: 'ed71c034-60bc-4fb1-bfdf-9570209076b5', variable: 'docker_password')]) {
                            script {
                                sh "docker login -u maxura -p ${docker_password}"
                            }
                        }
                    }
                }

                stage("Download chectl") {
                    steps {
                        script {
                            // TO-DO use option "--install-path" https://github.com/eclipse/che/pull/14182
                            sh """
                               curl -sL  https://www.eclipse.org/che/chectl/ > install_chectl.sh
                               chmod +x install_chectl.sh
                               sudo PATH=$PATH ./install_chectl.sh --channel=next
                               sudo mv /usr/local/bin/chectl ${WORKSPACE}/chectl
                               sudo chmod +x ${WORKSPACE}/chectl
                            """
                        }
                    }
                }

                stage("Obtain E2E Happy path tests") {
                    steps {
                        checkout([$class                           : 'GitSCM',
                                  branches                         : [[name: "master"]],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions                       : [[$class           : 'RelativeTargetDirectory',
                                                                       relativeTargetDir: 'che']],
                                  userRemoteConfigs                : [[url: "https://github.com/eclipse/che.git"]]])
                    }
                }

                stage("Prepare meta.yaml's") {
                    steps {
                        withCredentials([string(credentialsId: 'e45af3e6-8061-4d02-b187-b1c3bb133d3a', variable: 'github_token')]) {
                            script {
                                sh """
                                    git clone https://chepullreq4:${github_token}@github.com/chepullreq4/pr-check-files.git
                                    mkdir -p $PR_CHECK_FILES_DIR

                                    wget $YQ_TOOL_URL
                                    sudo chmod +x yq_linux_amd64

                                    wget $CHE_THEIA_META_YAML_URL -O $PR_CHECK_FILES_DIR/che_theia_meta.yaml
                                    ./yq_linux_amd64 w -i $PR_CHECK_FILES_DIR/che_theia_meta.yaml spec.containers[0].image maxura/che-theia:${ghprbPullId}

                                    wget $VSCODE_YAML_META_YAML_URL -O $PR_CHECK_FILES_DIR/vscode_yaml_meta.yaml
                                    ./yq_linux_amd64 w -i $PR_CHECK_FILES_DIR/vscode_yaml_meta.yaml spec.containers[0].image maxura/che-theia-endpoint-runtime-endpoint-runtime:${ghprbPullId}

                                    wget $JAVA8_META_YAML_URL -O $PR_CHECK_FILES_DIR/java8_meta.yaml
                                    ./yq_linux_amd64 w -i $PR_CHECK_FILES_DIR/java8_meta.yaml spec.containers[0].image maxura/che-remote-plugin-runner-java8:${ghprbPullId}

                                    wget $VSCODE_KUBERNETES_TOOLS_META_YAML_URL -O $PR_CHECK_FILES_DIR/vscode_kubernetes_tools_meta.yaml
                                    ./yq_linux_amd64 w -i $PR_CHECK_FILES_DIR/vscode_kubernetes_tools_meta.yaml spec.containers[0].image maxura/che-remote-plugin-kubernetes-tooling-1.0.0:${ghprbPullId}
                                    
                                    # patch che/e2e/files/happy-path/happy-path-workspace.yaml
                                    sed -i "s|id: eclipse/che-theia-endpoint-runtime/next|alias: che-theia-endpoint-runtime\n    reference: $PR_CHECK_FILES_GITHUB_URL/che_theia_meta.yaml|" ${DEVFILE_URL}

                                    sed -i "s|id: redhat/java/latest|alias: java8\n    reference: $PR_CHECK_FILES_GITHUB_URL/java8_meta.yaml|" ${DEVFILE_URL}
                                    sed -i "s|id: redhat/vscode-yaml/latest|alias: vscode_yaml\n    reference: $PR_CHECK_FILES_GITHUB_URL/vscode_yaml_meta.yaml\n  - type: chePlugin\n    alias: vscode_kubernetes_tools\n    reference: $PR_CHECK_FILES_GITHUB_URL/vscode_kubernetes_tools_meta.yaml|" ${DEVFILE_URL}

                                    cat ${DEVFILE_URL}

                                    cp ${DEVFILE_URL} ${PR_CHECK_FILES_DIR}
                                    cd ${PR_CHECK_FILES_DIR}
                                    git add -A
                                    git diff-index --quiet HEAD || git commit -m "Che PR ${ghprbPullId} files for build: https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/view/che-pr-tests/view/K8S/job/$JOB_NAME"
                                    git push
                                """
                            }
                        }
                    }
                }

                stage("Start Kubernetes") {
                    steps {
                        script {
                            sh """
                              sudo setenforce 0  

                              export MINIKUBE_WANTUPDATENOTIFICATION=false
                              export MINIKUBE_WANTREPORTERRORPROMPT=false
                              export MINIKUBE_HOME=$HOME
                              export CHANGE_MINIKUBE_NONE_USER=true
                              export KUBECONFIG=$HOME/.kube/config
                              export DOCKER_CONFIG=$HOME/.docker

                              mkdir -p $HOME/.kube $HOME/.minikube
                              touch \$KUBECONFIG
                              
                              sudo -E /usr/local/bin/minikube start \\
                                  --vm-driver=none \\
                                  --cpus 4 \\
                                  --memory 12288 \\
                                  --logtostderr
                            """
                        }
                    }
                }
            }
        }

        stage("Push che-theia images") {
            failFast true

            parallel {
                stage("Push che-theia image") {
                    steps {
                        script {
                            sh """
                            docker tag eclipse/che-theia:next maxura/che-theia:${ghprbPullId}
                            docker push maxura/che-theia:${ghprbPullId}
                            """
                        }
                    }
                }

                stage("Push che-theia-endpoint-runtime image") {
                    steps {
                        script {
                            sh """
                            docker tag eclipse/che-theia-endpoint-runtime:next maxura/che-theia-endpoint-runtime:${ghprbPullId}
                            docker push maxura/che-theia-endpoint-runtime:${ghprbPullId}
                            """
                        }
                    }
                }

                stage("Push che-remote-plugin-runner-java8 image") {
                    steps {
                        script {
                            sh """
                            docker tag eclipse/che-remote-plugin-runner-java8:next maxura/che-remote-plugin-runner-java8:${ghprbPullId}
                            docker push maxura/che-remote-plugin-runner-java8:${ghprbPullId}
                            """
                        }
                    }
                }

                stage("Push che-remote-plugin-kubernetes-tooling-1.0.0 image") {
                    steps {
                        script {
                            sh """
                            docker tag eclipse/che-remote-plugin-kubernetes-tooling-1.0.0:next maxura/che-remote-plugin-kubernetes-tooling-1.0.0:${ghprbPullId}
                            docker push maxura/che-remote-plugin-kubernetes-tooling-1.0.0:${ghprbPullId}
                            """
                        }
                    }
                }
            }
        }

        stage("Start Single User Eclipse Che") {
            steps {
                script {
                    sh """
                    ${WORKSPACE}/chectl server:start \\
                        --k8spodreadytimeout=180000 \\
                        -t=${WORKSPACE}/che/deploy/ \\
                        --platform=minikube \\
                        --listr-renderer=verbose
                    """

                    // wait che-server to be available
                    sh """
                        CHE_URL=\$(kubectl get ingress che-ingress -n=che -o=jsonpath={'.spec.rules[0].host'})
                        
                        COUNTER=0;
                        SUCCESS_RATE_COUNTER=0;
                        while true; do
                        if [ \$COUNTER -gt 180 ]; then
                        echo "Unable to get stable route. Exiting"
                        exit 1
                        fi
                        
                        ((COUNTER+=1))
                        
                        
                        STATUS_CODE=\$(curl -sL -w "%{http_code}" -I \${CHE_URL} -o /dev/null; true) || true
                        
                        echo "Try \${COUNTER}. Status code: \${STATUS_CODE}"
                        if [ "\$STATUS_CODE" == "200" ]; then 
                        ((SUCCESS_RATE_COUNTER+=1))
                        fi
                        sleep 1;
                        
                        if [ \$SUCCESS_RATE_COUNTER == \$SUCCESS_THRESHOLD ]; then 
                        echo "Route is stable enough. Continuing running tests"
                        break
                        fi
                        done
                    """
                }
            }
        }
 
        stage("Create test workspace") {
            steps {
                script {
                    sh "${WORKSPACE}/chectl workspace:start --devfile=$DEVFILE_URL"
                }
            }
        }

        stage("Run E2E Happy path tests") {
            steps {
                script {
                    sh """
                         CHE_HOST=\$(kubectl get ingress che-ingress -n=che -o=jsonpath={'.spec.rules[0].host'})
                         CHE_URL=http://\${CHE_HOST}
                         docker run --shm-size=256m --net=host --ipc=host \\
                           -e TS_SELENIUM_HEADLESS='true' \\
                           -e TS_SELENIUM_DEFAULT_TIMEOUT=300000 \\
                           -e TS_SELENIUM_LOAD_PAGE_TIMEOUT=240000 \\
                           -e TS_SELENIUM_WORKSPACE_STATUS_POLLING=20000 \\
                           -e TS_SELENIUM_BASE_URL=\${CHE_URL} \\
                           -e TS_SELENIUM_LOG_LEVEL='DEBUG' \\
                           -v ${WORKSPACE}/che/e2e:/tmp/e2e:Z \\
                           eclipse/che-e2e:nightly
                    """
                }
            }
        }
    }

    post {
        failure {
            script {
                echo "Create screencast from $WORKSPACE/che/e2e/report/executionScreencast files."
                sh """
                    command -v ffmpeg >/dev/null 2>&1 && if ls $WORKSPACE/che/e2e/report/executionScreencast/*.png 1> /dev/null 2>&1; then
                      cd $WORKSPACE/che/e2e/report/executionScreencast

                      # remove first screenshot which has lower resolution 800x600 and breaks screencast video
                      sudo rm -f 00100001* || true
                      
                      sudo ffmpeg -framerate 1 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p $WORKSPACE/che/e2e/report/screencast.mp4
                      cd $WORKSPACE/che/e2e/report/
                      sudo rm -rf $WORKSPACE/che/e2e/report/executionScreencast
                    fi
                """
            }
        }

        cleanup {
            script {
                sh """                      
                      mkdir -p $LOGS_AND_CONFIGS/kubectl
                      kubectl --namespace=che get events > $LOGS_AND_CONFIGS/kubectl/events.txt || true
                      mkdir -p $LOGS_AND_CONFIGS/che-config
                      kubectl get configmaps --namespace=che che -o yaml > $LOGS_AND_CONFIGS/che-config/configmap.yaml || true
                      kubectl get ingresses --namespace=che > $LOGS_AND_CONFIGS/che-config/ingresses.txt || true
                      kubectl get all -n che -o yaml > $LOGS_AND_CONFIGS/che-config/all.yaml || true
                      mkdir -p $LOGS_AND_CONFIGS/che-logs
                      kubectl logs --namespace=che \$(kubectl get pods --namespace=che | grep che- | awk {'print \$1'})>$LOGS_AND_CONFIGS/che-logs/che-server.log || true
                      kubectl logs --namespace=che \$(kubectl get pods --namespace=che | grep devfile-registry- | awk {'print \$1'})>$LOGS_AND_CONFIGS/che-logs/devfile-registry.log || true
                      kubectl logs --namespace=che \$(kubectl get pods --namespace=che | grep plugin-registry- | awk {'print \$1'})>$LOGS_AND_CONFIGS/che-logs/plugin-registry.log || true
                        
                      mkdir -p $LOGS_AND_CONFIGS/workspace-logs
                      export WS_POD=\$(kubectl get pod --namespace=che | grep  workspace | awk '{print \$1}')
                      for c in \$(kubectl get pod --namespace=che \$WS_POD -o jsonpath="{.spec.containers[*].name}") ; do kubectl logs \$(kubectl get pod --namespace=che | grep  workspace | awk '{print \$1}') "\${c}" -n che > $LOGS_AND_CONFIGS/workspace-logs/"\${c}"-container.log || true; done
                      kubectl describe pod --namespace=che \$WS_POD > $LOGS_AND_CONFIGS/che-config/workspace-pod-description.txt || true
                """

                archiveArtifacts allowEmptyArchive: true, artifacts: "che/e2e/report/**, logs-and-configs/**"
            }
        }

    }

}
